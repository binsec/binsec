/**************************************************************************/
/*  This file is part of BINSEC.                                          */
/*                                                                        */
/*  Copyright (C) 2016-2023                                               */
/*    CEA (Commissariat à l'énergie atomique et aux énergies              */
/*         alternatives)                                                  */
/*                                                                        */
/*  you can redistribute it and/or modify it under the terms of the GNU   */
/*  Lesser General Public License as published by the Free Software       */
/*  Foundation, version 2.1.                                              */
/*                                                                        */
/*  It is distributed in the hope that it will be useful,                 */
/*  but WITHOUT ANY WARRANTY; without even the implied warranty of        */
/*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         */
/*  GNU Lesser General Public License for more details.                   */
/*                                                                        */
/*  See the GNU Lesser General Public License version 2.1                 */
/*  for more details (enclosed in the file licenses/LGPLv2.1).            */
/*                                                                        */
/**************************************************************************/

{
  let dypgen_match_length = `longest

  let string f lexbuf =
    let buf = Buffer.create 16 in
    f buf lexbuf;
    let s = Scanf.unescaped (Buffer.contents buf) in
    Bitvector.create (Z.of_bits s) (8 * String.length s)

  let uid =
    let i = ref 0 in
    fun () -> incr i; Format.sprintf "%%%d" !i
}

%token LSL LSR ASR ROL ROR <int> ZEXT <int> SEXT
%token CASE IS
%token VALUE SIZE LAST
%token <string>         INT
%token <Bitvector.t> CONST

%relation core<ext<unary<arith0<bitwize0<arith1<bitwize1
          <concat<diff<ineq<logand<logor

%token NONDET UNDEF AS
%token ASSET ASSUME
%token IF THEN ELSE
%token GOTO JUMP AT HALT ABORT
%token WHILE FOR IN TO DO END

%token STARTING FROM FILE CORE LOAD SECTION SECTIONS IMPORT
%token REACH CUT ENUMERATE
%token TIMES SUCH THAT PRINT FORMULA MODEL STREAM BIN DEC HEXA ASCII CSTRING
%token REPLACE BY WITH

%layout [' ' '\t']

%constructor Obj Decl
%constructor String  %for ident wident label
%constructor Symbol  %for symbol
%constructor Loc     %for var load loc
%constructor Unop    %for ext unop
%constructor Binop   %for arith0 arith1 bitwize0 bitwize1 cmpop
%constructor Expr    %for const expr
%constructor Instr   %for assignment fallthrough terminator
%constructor Stmt    %for instr block instr_or_block control labelled stmt stmts
%constructor Program %for program

%start stmts

%lexer

let space = ' ' | '\t' | '\r'
let digit = ['0'-'9']
let hexdigit = ['0'-'9''A'-'F''a'-'f']
let hex = '0' 'x' (hexdigit '_'*)+
let bin = '0' 'b' (['0''1'] '_'*)+
let alpha = ['a'-'z''A'-'Z']
let alpha_num = (alpha | digit)
let sident = '_'* alpha (alpha_num | '_')* ('.' (alpha_num | '_')+)*
let tempvar = "%%" digit+
let wident = ([^ ':' '@' '>' ' ' '#' '\n'] | "@@" | "::")*
let comment = '#' [^'\n']*

rule dquote buf = parse
  | '"' 'z' { Buffer.add_char buf '\x00' }
  | '"'     { () }
  | _       { Buffer.add_string buf (Dyp.lexeme lexbuf); dquote buf lexbuf }
and quote buf = parse
  | "'z" { Buffer.add_char buf '\x00' }
  | "'"  { () }
  | _    { Buffer.add_string buf (Dyp.lexeme lexbuf); quote buf lexbuf }

main lexer =
"as"                      ->  AS
"nondet"                  ->  NONDET
"undef"                   ->  UNDEF
"assert"                  ->  ASSERT
"assume"                  ->  ASSUME
"if"                      ->  IF
"then"                    ->  THEN
"else"                    ->  ELSE
"goto"                    ->  GOTO
"jump"                    ->  JUMP
"at"                      ->  AT
"halt"                    ->  HALT
"abort"                   ->  ABORT
"while"                   ->  WHILE
"for"                     ->  FOR
"in"                      ->  IN
"to"                      ->  TO
"do"                      ->  DO
"end"                     ->  END
"case"                    ->  CASE
"is"                      ->  IS
"value"                   ->  VALUE
"size"                    ->  SIZE
"last"                    ->  LAST
"true"                    ->  CONST { Bitvector.one }
"false"                   ->  CONST { Bitvector.zero }
"lsl"                     ->  LSL
"lsr"                     ->  LSR
"asr"                     ->  ASR
"rol"                     ->  ROL
"ror"                     ->  ROR
"uext" digit+             ->  ZEXT
                            { Scanf.sscanf (Dyp.lexeme lexbuf) "uext%d" Fun.id }
"sext" digit+             ->  SEXT
                            { Scanf.sscanf (Dyp.lexeme lexbuf) "sext%d" Fun.id }
(digit '_'*)+             ->  INT { Dyp.lexeme lexbuf }
bin | hex                 ->  INT { Dyp.lexeme lexbuf }
'"'                       ->  CONST { string dquote lexbuf }
"'"                       ->  CONST { string quote lexbuf }
'\n'                      ->
comment                   ->
space                     ->

%parser

symbol:
  | '<' - wident<name> [ ':' attr ]?<attr> - '>'
    { Ast.Symbol.create name ?attr, dyp.symbol_start_pos () } core
  | '<' - wident<name> - "@plt" - '>'
    { Ast.Symbol.create name ~attr:Dba.Var.Tag.Plt,
      dyp.symbol_start_pos () } core

int:
  | INT<str> { Z.of_string str }

const:
  | '-' INT<value>
    { Ast.Expr.integer ~src:("-"^value) (Z.neg (Z.of_string value)),
      dyp.symbol_start_pos () }
  | INT<value>
    { Ast.Expr.integer ~src:value (Z.of_string value),
      dyp.symbol_start_pos () }
  | '-' INT<value> - '<' - int<size> - '>'
    { Ast.Expr.constant (Bitvector.create (Z.neg (Z.of_string value)) (Z.to_int size)),
      dyp.symbol_start_pos () }
  | INT<value> - '<' - int<size> - '>'
    { Ast.Expr.constant (Bitvector.create (Z.of_string value) (Z.to_int size)),
      dyp.symbol_start_pos () }
  | CONST<value>     { Ast.Expr.constant value, dyp.symbol_start_pos () }

range:
  | '{' int<hi> [ ".." int ]?<lo> '}'
    { { Interval.hi=Z.to_int hi; lo=Z.to_int (Option.value ~default:hi lo) } }

ident:
  | sident
  | tempvar

var:
  | ident<name> - '<' - int<size> - '>'
    { Ast.Loc.var name ~size:(Ast.Size.some (Z.to_int size)),
      dyp.symbol_start_pos () }
  | ident<name>
    { Ast.Loc.var name, dyp.symbol_start_pos () }

array:
  | ident<var> { Some var }
  | '@'        { None }

endianness:
  | "<-" { Machine.LittleEndian }
  | "->" { Machine.BigEndian }

load:
  | array<array> - '[' expr<addr> [ ',' endianness ]?<endianness>
                                  [ ',' int ]?<size> ']'
    { Ast.Loc.load ?array (Option.fold ~none:1 ~some:Z.to_int size)
      ?endianness addr, dyp.symbol_start_pos () }

loc:
  | var<var>   { var }
  | load<load> { load }
  | loc<loc> - range<r>
    { let { Interval.hi; lo } = r in
      Ast.Loc.restrict ~hi ~lo loc, dyp.symbol_start_pos () }

wident:
  | wident
attr:
  | VALUE { Dba.Var.Tag.Value }
  | SIZE  { Dba.Var.Tag.Size }
  | LAST  { Dba.Var.Tag.Last }

expr:
  | '(' expr<x> ')'
    { x } core
  | var<var>
    { Ast.Expr.loc var, dyp.symbol_start_pos () } core
  | load<load>
    { Ast.Expr.loc load,
      dyp.symbol_start_pos () } core
  | const<x>
    { x } core
  | symbol<sym>
    { Ast.Expr.symbol sym, dyp.symbol_start_pos () } core
  | expr(<= core)<x> - range<r>
    { let { Interval.hi; lo } = r in
      Ast.Expr.restrict ~hi ~lo x, dyp.symbol_start_pos () } core
  | ext<op> expr(< ext)<x>
    { op x, dyp.symbol_start_pos () } ext
  | unop<op> expr(<= unary)<x>
    { op x, dyp.symbol_start_pos () } unary
  | expr(<= arith0)<x> accept_newline arith0<op> expr(< arith0)<y>
    { op x y, dyp.symbol_start_pos () } arith0
  | expr(<= bitwize0)<x> accept_newline bitwize0<op> expr(< bitwize0)<y>
    { op x y, dyp.symbol_start_pos () } bitwize0
  | expr(<= arith1)<x> accept_newline arith1<op> expr(< arith1)<y>
    { op x y, dyp.symbol_start_pos () } arith1
  | expr(<= bitwize1)<x> accept_newline bitwize1<op> expr(< bitwize1)<y>
    { op x y, dyp.symbol_start_pos () } bitwize1
  | expr(< concat)<x> accept_newline "::" expr(<= concat)<y>
    { Ast.Expr.append x y, dyp.symbol_start_pos () } concat
  | expr(< diff)<x> accept_newline "<>" expr(< diff)<y>
    { Ast.Expr.diff x y, dyp.symbol_start_pos () } diff
  | expr(<= diff)<x>
    [ accept_newline cmpop<op> expr(<= diff)<y> { (op, y) } ]+<y>
    { fst (fst (List.fold_left
           (fun (e, a) (op, b) ->
             (Ast.Expr.logand e (op a b, Lexing.dummy_pos),
              Lexing.dummy_pos), b)
           ((Ast.Expr.one, Lexing.dummy_pos), x) y)),
            dyp.symbol_start_pos () } ineq
  | expr(<= logand)<x> accept_newline "&&" expr(< logand)<y>
    { Ast.Expr.logand x y, dyp.symbol_start_pos () } logand
  | expr(<= logor)<x> accept_newline "||" expr(< logor)<y>
    { Ast.Expr.logor x y, dyp.symbol_start_pos () } logor
  | expr(<= logor)<t> accept_newline '?' expr(<= logor)<x> ':' expr<y>
    { Ast.Expr.ite t x y, dyp.symbol_start_pos () }
  | CASE expr(<= logor)<r> IS
    [ const<x> ':' expr<y> accept_newline { (x, y) } ]*<cases>
    '_' ':' expr(<= logor)<default>
    { fst (List.fold_left
        (fun e (k, c) ->
          Ast.Expr.ite (Ast.Expr.equal r k, Lexing.dummy_pos) c e,
          Lexing.dummy_pos) default
         (List.rev cases)), dyp.symbol_start_pos () }

ext:
  | ZEXT<n> { Ast.Expr.uext n }
  | SEXT<n> { Ast.Expr.sext n }

unop:
  | '~'        { Ast.Expr.lognot }
  | '!'        { Ast.Expr.lognot }
  | '-'        { Ast.Expr.neg }

arith0:
  | '*'        { Ast.Expr.mul }
  | "/u"       { Ast.Expr.udiv }
  | '/'        { Ast.Expr.udiv }
  | "/s"       { Ast.Expr.sdiv }
  | "%u"       { Ast.Expr.umod }
  | '%'        { Ast.Expr.umod }
  | "%s"       { Ast.Expr.smod }

bitwize0:
  | '&'        { Ast.Expr.logand }
  | '|'        { Ast.Expr.logor }
  | '^'        { Ast.Expr.logxor }

arith1:
  | '+'        { Ast.Expr.add }
  | '-'        { Ast.Expr.sub }

bitwize1:
  | LSL        { Ast.Expr.shift_left }
  | LSR        { Ast.Expr.shift_right }
  | ASR        { Ast.Expr.shift_right_signed }
  | ROL        { Ast.Expr.rotate_left }
  | ROR        { Ast.Expr.rotate_right }

cmpop:
  | '='        { Ast.Expr.equal }
  | ">="       { Ast.Expr.uge }
  | '>'        { Ast.Expr.ugt }
  | "<="       { Ast.Expr.ule }
  | '<'        { Ast.Expr.ult }
  | ">=u"      { Ast.Expr.uge }
  | ">u"       { Ast.Expr.ugt }
  | "<=u"      { Ast.Expr.ule }
  | "<u"       { Ast.Expr.ult }
  | ">=s"      { Ast.Expr.sge }
  | ">s"       { Ast.Expr.sgt }
  | "<=s"      { Ast.Expr.sle }
  | "<s"       { Ast.Expr.slt }

assignment:
  | loc<lval> ":=" expr<rval>
    { Ast.Instr.assign lval rval }
  | loc<lval> ":=" UNDEF
    { Ast.Instr.undef lval }
  | loc<lval> ":=" NONDET
    { Ast.Instr.nondet lval }

fallthrough:
  | assignment<x>  { x }
  | ASSERT expr<x> { Ast.Instr.dynamic_assert x }
  | ASSUME expr<x> { Ast.Instr.assume x }

terminator:
  | JUMP AT expr<x> { Ast.Instr.dynamic_jump x }
  | HALT            { Ast.Instr.halt }

instr_or_block:
  | instr
  | block<block> END { block }

instr:
  | loc<lval> ":=" expr<rval> accept_newline AS ident<name>
    { let var =
        Ast.Loc.var name ~size:(Ast.Size.sizeof lval),
        Lexing.dummy_pos in
      [ Ast.Instr.assign var rval;
        Ast.Instr.assign lval (Ast.Expr.loc var, Lexing.dummy_pos) ] }
  | loc<lval> ":=" NONDET accept_newline AS ident<name>
    { let var = Ast.Loc.var name ~size:(Ast.Size.sizeof lval),
                Lexing.dummy_pos in
      [ Ast.Instr.nondet var;
        Ast.Instr.assign lval (Ast.Expr.loc var, Lexing.dummy_pos) ] }
  | fallthrough<instr>
    { [ instr ] }

block:
  | IF expr<test> THEN stmts<stmts>
    { let target = uid () in
      List.concat
        [ [ Ast.Instr.conditional_jump
            (Ast.Expr.lognot test, Lexing.dummy_pos) target ];
          stmts;
          [ Ast.Instr.label target ] ] }
  | IF expr<test> THEN stmts<t> ELSE stmts<e>
    { let target = uid () and target' = uid () in
      List.concat
        [ [ Ast.Instr.conditional_jump
            (Ast.Expr.lognot test, Lexing.dummy_pos) target ];
          t;
          [ Ast.Instr.goto target'; Ast.Instr.label target ];
          e;
          [ Ast.Instr.label target' ] ] }
  | WHILE expr<test> DO stmts<stmts>
    { let target = uid () and target' = uid () in
      (* TOFIX #WEIRD: as SSE favour the "else" branch, we invert the
         construction to exit the loop faster. *)
      let target'' = uid () in
      List.concat
        [ [ Ast.Instr.label target;
            Ast.Instr.conditional_jump test target';
            Ast.Instr.goto target'';
            Ast.Instr.label target' ];
          stmts;
          [ Ast.Instr.goto target; Ast.Instr.label target'' ] ] }
  | FOR var<cnt> IN expr<init> TO expr<upto> DO stmts<stmts>
    { let target = uid () and target' = uid () in
      (* TOFIX #WEIRD: as SSE favour the "else" branch, we invert the
          construction to exit the loop faster. *)
      let target'' = uid () and ecnt = Ast.Expr.loc cnt, Lexing.dummy_pos in
      List.concat
        [ [ Ast.Instr.assign cnt init;
            Ast.Instr.label target;
            Ast.Instr.conditional_jump
              (Ast.Expr.sle ecnt upto, Lexing.dummy_pos) target';
            Ast.Instr.goto target'';
            Ast.Instr.label target' ];
          stmts;
          [ Ast.Instr.assign cnt (Ast.Expr.succ ecnt, Lexing.dummy_pos);
            Ast.Instr.goto target;
            Ast.Instr.label target'' ] ] }
  | CASE expr<choice> IS
    [ const<k> ':' [ stmt ]+<stmts> { (k, List.flatten stmts) } ]*<cases>
    [ '_' ':' stmts ]?<default>
    { let rec aux cases next stmts =
        match cases with
        | [] -> stmts
        | (value, body) :: cases ->
           let label = uid () in
           aux cases label @@
             Ast.Instr.label label
             :: Ast.Instr.conditional_jump
                  (Ast.Expr.diff value choice, Lexing.dummy_pos) next
             :: List.rev_append body stmts in
      let tail = uid () in
      let rev_stmts =
        List.rev_map
          (fun (value, body) ->
            value, (Ast.Instr.goto tail :: List.rev body)) cases in
      let tail_stmts = [ Ast.Instr.label tail ] in
      let default, default_stmts = match default with
        | None -> tail, tail_stmts
        | Some stmts ->
           let default = uid () in
           let default_stmts = List.append stmts tail_stmts in
           default, Ast.Instr.label default :: default_stmts in
      aux rev_stmts default default_stmts }

control:
  | GOTO label<target>
    { [ Ast.Instr.goto target ] }
  | terminator<term> { [ term ] }
  | ABORT
    { [ Ast.Instr.dynamic_assert (Ast.Expr.zero, Lexing.dummy_pos);
        Ast.Instr.halt ] }


label:
  | '.' - ident

newline:
  | '\n' { (* Option.iter Dyp.set_newline dyp.local_data *) }

accept_newline:
  | { () }
  | newline

separator:
  | newline
  | ';'  { () }
  | eof  { () }

stmt:
  | label<label> ':' separator
    { [ Ast.Instr.label label ] }
  | [ label<label> ':' { label } ]?<label> instr_or_block<instr> separator
    { Option.fold ~none:instr
        ~some:(fun label -> Ast.Instr.label label :: instr) label }

labelled:
  | { [] }
  | label<label> ':' stmts<stmts>
    { Ast.Instr.label label :: stmts }

stmts:
  | stmt*<stmts> { List.flatten stmts }
  | stmts<stmts> control<control> separator labelled<labelled>
    {  List.concat [ stmts; control; labelled ] }
